// Code generated by "enumer -type=SmartMoneyActivities -linecomment -json=true -text=true -sql=true"; DO NOT EDIT.

package common

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _SmartMoneyActivitiesName = "alldepositwithdrawbuyingselling"

var _SmartMoneyActivitiesIndex = [...]uint8{0, 3, 10, 18, 24, 31}

const _SmartMoneyActivitiesLowerName = "alldepositwithdrawbuyingselling"

func (i SmartMoneyActivities) String() string {
	i -= 1
	if i >= SmartMoneyActivities(len(_SmartMoneyActivitiesIndex)-1) {
		return fmt.Sprintf("SmartMoneyActivities(%d)", i+1)
	}
	return _SmartMoneyActivitiesName[_SmartMoneyActivitiesIndex[i]:_SmartMoneyActivitiesIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SmartMoneyActivitiesNoOp() {
	var x [1]struct{}
	_ = x[SmartMoneyActivitiesAll-(1)]
	_ = x[SmartMoneyActivitiesDeposit-(2)]
	_ = x[SmartMoneyActivitiesWithdraw-(3)]
	_ = x[SmartMoneyActivitiesBuying-(4)]
	_ = x[SmartMoneyActivitiesSelling-(5)]
}

var _SmartMoneyActivitiesValues = []SmartMoneyActivities{SmartMoneyActivitiesAll, SmartMoneyActivitiesDeposit, SmartMoneyActivitiesWithdraw, SmartMoneyActivitiesBuying, SmartMoneyActivitiesSelling}

var _SmartMoneyActivitiesNameToValueMap = map[string]SmartMoneyActivities{
	_SmartMoneyActivitiesName[0:3]:        SmartMoneyActivitiesAll,
	_SmartMoneyActivitiesLowerName[0:3]:   SmartMoneyActivitiesAll,
	_SmartMoneyActivitiesName[3:10]:       SmartMoneyActivitiesDeposit,
	_SmartMoneyActivitiesLowerName[3:10]:  SmartMoneyActivitiesDeposit,
	_SmartMoneyActivitiesName[10:18]:      SmartMoneyActivitiesWithdraw,
	_SmartMoneyActivitiesLowerName[10:18]: SmartMoneyActivitiesWithdraw,
	_SmartMoneyActivitiesName[18:24]:      SmartMoneyActivitiesBuying,
	_SmartMoneyActivitiesLowerName[18:24]: SmartMoneyActivitiesBuying,
	_SmartMoneyActivitiesName[24:31]:      SmartMoneyActivitiesSelling,
	_SmartMoneyActivitiesLowerName[24:31]: SmartMoneyActivitiesSelling,
}

var _SmartMoneyActivitiesNames = []string{
	_SmartMoneyActivitiesName[0:3],
	_SmartMoneyActivitiesName[3:10],
	_SmartMoneyActivitiesName[10:18],
	_SmartMoneyActivitiesName[18:24],
	_SmartMoneyActivitiesName[24:31],
}

// SmartMoneyActivitiesString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SmartMoneyActivitiesString(s string) (SmartMoneyActivities, error) {
	if val, ok := _SmartMoneyActivitiesNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SmartMoneyActivitiesNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SmartMoneyActivities values", s)
}

// SmartMoneyActivitiesValues returns all values of the enum
func SmartMoneyActivitiesValues() []SmartMoneyActivities {
	return _SmartMoneyActivitiesValues
}

// SmartMoneyActivitiesStrings returns a slice of all String values of the enum
func SmartMoneyActivitiesStrings() []string {
	strs := make([]string, len(_SmartMoneyActivitiesNames))
	copy(strs, _SmartMoneyActivitiesNames)
	return strs
}

// IsASmartMoneyActivities returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SmartMoneyActivities) IsASmartMoneyActivities() bool {
	for _, v := range _SmartMoneyActivitiesValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SmartMoneyActivities
func (i SmartMoneyActivities) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SmartMoneyActivities
func (i *SmartMoneyActivities) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SmartMoneyActivities should be a string, got %s", data)
	}

	var err error
	*i, err = SmartMoneyActivitiesString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SmartMoneyActivities
func (i SmartMoneyActivities) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SmartMoneyActivities
func (i *SmartMoneyActivities) UnmarshalText(text []byte) error {
	var err error
	*i, err = SmartMoneyActivitiesString(string(text))
	return err
}

func (i SmartMoneyActivities) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *SmartMoneyActivities) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of SmartMoneyActivities: %[1]T(%[1]v)", value)
	}

	val, err := SmartMoneyActivitiesString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
